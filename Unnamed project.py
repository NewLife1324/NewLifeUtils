IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0NCiMgbmV3IHByb2plY3QNCmZyb20gTmV3TGlmZVV0aWxzIGltcG9ydCAqDQpkZWYgZ2V0X2dlbmRlcihuYW1lKToNCiAgICBpbXBvcnQgcHltb3JwaHkyDQogICAgZ2VuZGVyID0gcHltb3JwaHkyLk1vcnBoQW5hbHl6ZXIoKS5wYXJzZShuYW1lKVswXS50YWcuZ2VuZGVyDQogICAgaWYgZ2VuZGVyID09ICdtYXNjJzoNCiAgICAgICAgcmV0dXJuICdtJw0KICAgIGlmIGdlbmRlciA9PSAnZmVtbic6DQogICAgICAgIHJldHVybiAnZicNCiAgICAgICAgDQpjbGFzcyBEYXRhU2VjdG9yKG9iamVjdCk6DQogICAgZGF0YV9zdG9yYWdlID0ge30NCiAgICBkZWYgY3JlYXRlX3NlY3Rpb24oc2VsZiwgbmFtZSwgKmFyZ3MpOg0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIHNlbGYuZGF0YV9zdG9yYWdlW25hbWVdDQogICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgc2VsZi5kYXRhX3N0b3JhZ2VbbmFtZV0gPSBbXQ0KICAgICAgICAgICAgZm9yIGl0ZW0gaW4gYXJnczoNCiAgICAgICAgICAgICAgICBzZWxmLmRhdGFfc3RvcmFnZVtuYW1lXS5hcHBlbmQoaXRlbSkNCiAgICBkZWYgZ2V0X3N0b3JhZ2Uoc2VsZik6DQogICAgICAgIHJldHVybihzZWxmLmRhdGFfc3RvcmFnZSkNCiAgICBkZWYgZ2V0X3NlY3Rpb24oc2VsZiwgc2VjdGlvbl9uYW1lKToNCiAgICAgICAgcmV0dXJuKHNlbGYuZGF0YV9zdG9yYWdlW3NlY3Rpb25fbmFtZV0pDQoNCmNsYXNzIERlZlNlY3RvcjoNCiAgICANCiAgICBjbGFzcyBTY2hvb2wob2JqZWN0KToNCiAgICAgICAgc2Nob29sX25hbWUgPSAn0KbQtdC90YLRgNCw0LvRjNC90LDRjyDRiNC60L7Qu9CwJw0KICAgICAgICBzY2hvb2xfbnVtYmVyID0gMTINCiAgICAgICAgc2Nob29sX2lkID0gJ0hVSzg1ODZMT0s0NTg2NTg0NkpVSDUxNDZZR1RGODE5NVJPT09PJw0KICAgICAgICANCiAgICBjbGFzcyBDYWJpbmV0KG9iamVjdCk6DQogICAgICAgIHBhc3MNCiAgICBjbGFzcyBDbGFzc0NhYmluZXQoQ2FiaW5ldCk6DQogICAgICAgIHBhc3MNCiAgICAgICAgDQogICAgY2xhc3MgUGVyc29uKG9iamVjdCk6DQogICAgICAgIG5hbWUgPSAn0JDRgNC60LDQtNC40LknDQogICAgICAgIHN1cm5hbWUgPSAn0JrQvtGC0LDQt9C+0LInDQogICAgICAgIHBhdHJvbnltaWMgPSAn0JzQuNGF0LDQuNC70L7QstC40YcnDQogICAgICAgIA0KICAgIGNsYXNzIFN0YWZmKFBlcnNvbik6DQogICAgICAgIHN0YWZmX3R5cGUgPSAnZGlyZWN0b3InDQogICAgY2xhc3MgVGVhY2hlcihQZXJzb24pOg0KICAgICAgICBzY2hvb2xfc3ViamVjdHMgPSBbJ9Cc0LDRgtC10LzQsNGC0LjQutCwJywgJ9Ck0LjQt9C40LrQsCddDQogICAgY2xhc3MgU3R1ZGVudChQZXJzb24pOg0KICAgICAgICBnb2FsID0geyJ0eXBlIjoic3R1ZCJ9DQogICAgICAgIA0KICAgIGNsYXNzIFN1YmplY3Q6DQogICAgICAgIHBhc3MNCmNsYXNzIENvbW1hbmRzU2VjdG9yOg0KICAgIGNsYXNzIEluZm8oQ3VzdG9tU2hlbGxNb2R1bGUuQ29tbWFuZCk6DQogICAgICAgIGNvbW1hbmQgPSAi0LjQvdGE0L4iDQogICAgICAgIGFsaWFzZXMgPSBbY29tbWFuZCwgItC40L3RhNC+0YDQvNCw0YbQuNGPIl0NCiAgICAgICAgZGVzY3JpcHRpb24gPSAi0JLRgdGPINC40L3RhNC+0YDQvNCw0YbQuNGPINC+INC60L7QvNC80LDQvdC00LDRhSINCiAgICAgICAgcmVxdWlyZWQgPSBbXQ0KICAgICAgICBvcHRpb25hbCA9IFtdDQogICAgICAgIHNraXBjaGVjayA9IEZhbHNlDQogICAgICAgIGRlZiBydW4oY29uc29sZSk6DQogICAgICAgICAgICBpbmZvID0gJ1xuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4nDQogICAgICAgICAgICBpbmZvICs9ICfQrdGC0L4g0LzQvtC5INC90L7QstGL0Lkg0L/RgNC+0LXQutGCINC+0YHQvdC+0LLQsNC90L3Ri9C5INC90LAgTkxVNVxuJw0KICAgICAgICAgICAgaW5mbyArPSAn0JHQvtC70YzRiNC1INC90LXRgiDQtNC+0YHRgtGD0L/QvdC+0Lkg0LjQvdGE0L7RgNC80LDRhtC40LhcbicNCiAgICAgICAgICAgIGluZm8gKz0gJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuJw0KICAgICAgICAgICAgY29uc29sZS5Mb2dnZXIubG9nKGluZm8pDQoNCmRlZiBjbWRpbnRlcigpOg0KICAgICNJbml0IEN1c3RvbVNoZWxsTW9kdWxlDQogICAgY21kID0gQ3VzdG9tU2hlbGxNb2R1bGUoKQ0KICAgIA0KICAgICNSZWdpc3RlciBjb21tYW5kcw0KICAgIGNtZC5yZWdpc3RlckNvbW1hbmQoQ29tbWFuZHNTZWN0b3IuSW5mbykNCiAgICANCiAgICAjc3RhcnQgbWFpbiBjeWNsZQ0KICAgIGNtZC5tYWluKCkNCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6DQogICAgbG9nZ2VyID0gTG9nZ2VyTW9kdWxlKCkNCiAgICBQZXJzb25JbmZvID0gRGF0YVNlY3RvcigpDQogICAgaW1wb3J0IGNvZGVjcw0KICAgIGRhdGFmaWxlID1vcGVuKCdVbm5hbWVkIHByb2plY3QgLSBkYXRhLmpzb24nLCAncicsIGVuY29kaW5nPSd1dGY4JykNCiAgICBkYXRhID0ganNvbi5sb2FkcyhkYXRhZmlsZS5yZWFkKCkpDQogICAgDQogICAgUGVyc29uSW5mby5jcmVhdGVfc2VjdGlvbignbmFtZXMnLGRhdGFbJ25hbWVzJ10pDQogICAgUGVyc29uSW5mby5jcmVhdGVfc2VjdGlvbignc3VybmFtZXMnLGRhdGFbJ3N1cm5hbWVzJ10pDQogICAgUGVyc29uSW5mby5jcmVhdGVfc2VjdGlvbigncGF0cm9ueW1pY3MnLGRhdGFbJ3BhdHJvbnltaWNzJ10pDQogICAgbG9nZ2VyLmxvZyhQZXJzb25JbmZvKQ0KICAgIA